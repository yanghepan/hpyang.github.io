{"meta":{"title":"hpyang's note","subtitle":"","description":"","author":"hpyang","url":"http://yoursite.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-04-12T08:27:06.195Z","updated":"2020-04-11T14:50:17.630Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-04-12T08:27:06.194Z","updated":"2020-04-11T14:50:17.627Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2020-04-12T08:27:06.194Z","updated":"2020-04-11T14:50:17.628Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-04-12T08:27:06.195Z","updated":"2020-04-11T14:50:17.630Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-04-12T08:27:06.194Z","updated":"2020-04-11T14:50:17.629Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-04-12T08:27:06.194Z","updated":"2020-04-11T14:50:17.627Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-12T08:27:06.194Z","updated":"2020-04-11T14:50:17.628Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"mac下Finder和命令行相互切换","slug":"mac-finder-change-to-cmd-md","date":"2020-08-03T22:40:16.000Z","updated":"2020-08-03T22:58:01.101Z","comments":true,"path":"2020/08/04/mac-finder-change-to-cmd-md/","link":"","permalink":"http://yoursite.com/2020/08/04/mac-finder-change-to-cmd-md/","excerpt":"","text":"背景在mac的使用过程中，你经常会有这样的需求：通过Finder进入了一个很深的路径，需要在那个路径下打开终端，输入一些命令;或者在终端中进入了一个很深的路径，这时候需要用Finder打开这个路径，在Finder里右键属性，查看当前的路径地址，然后打开终端，一层一层的输入，虽然终端的路径补全功能很高级，但是也挡不住目录太深，操作起来非常麻烦和易错。这里推荐一种工具来完成。 Finder打开终端git地址：https://github.com/jbtule/cdto.git 可以采用二进制的方式编译，也可以下载zip包。下载解压完以后，找到里面对应你的系统版本，我用的iterm里面的，直接把cd to 拖到Finder顶上的toolbar。 这里要注意：10.9最新版再拖拽的时候需要按住 cmd+alt键 终端打开finder最早的时候，笔者都是先在终端里输入pwd,获取并复制当前路径，然后点开Finder,然后command+shift+G,然后把地址粘贴到“Go to the folder”里。后来发现个更科幻的方法,直接在终端里输入： 1open .","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"finder","slug":"finder","permalink":"http://yoursite.com/tags/finder/"},{"name":"cdto","slug":"cdto","permalink":"http://yoursite.com/tags/cdto/"}]},{"title":"Typora中MarkDown语法","slug":"Typora中MarkDown语法","date":"2020-04-13T15:22:02.000Z","updated":"2020-04-13T15:31:49.205Z","comments":true,"path":"2020/04/13/Typora中MarkDown语法/","link":"","permalink":"http://yoursite.com/2020/04/13/Typora%E4%B8%ADMarkDown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"标题级别123456# 一级标题 command + 1## 二级标题 command + 2### 三级标题 command + 3#### 四级标题 command + 4##### 五级标题 command + 5###### 六级标题 command + 6 引用12&gt; 引用command+option+Q 列表无序列表123456789* AAA* BBB* CCC* 多行列表TAB * 多行列表TAB TAB * 多行列表command+option+U 有序列表1234567891. AAA 2. BBB3. CCC1. 多行列表TAB 1. 多行列表TAB TAB 1. 多行列表command+option+O 任务列表1234- [ ]抽烟- [x]喝酒command+option+U 代码123&#96; String aaa&#x3D;&quot;typora&quot; &#96; &#x2F;&#x2F;单行代码 ​&#96;&#96;&#96;+ 回车 &#x2F;&#x2F;代码块 command+option+C\\partial 数学表达式math1$$ $$\\mathbf{V}_1\\times\\mathbf{V}_2= \\begin{vmatrix}\\mathbf{i}&amp;\\mathbf{j}&amp;\\mathbf{k}\\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u}&amp; 0\\\\frac{\\partial X}{\\partial v}&amp;\\frac{\\partial Y}{\\partial v} &amp; 0\\\\end{vmatrix}$$ 公式1输入$$ + 回车 command+option+B $$P_{u,i}=\\frac{\\sum_{j}^n(sum{{u,j}})*R{j,i}}{\\sum_{j}^nsim_{u,j}}$$ 表格12|表头1|表头2| + 回车Command+T 表头1 表头2 图流程图123​&#96;&#96;&#96;mermaid + 回车graph LR 横向流程图graph TD 竖向流程图 12345graph LRA[方形] --&gt; B(圆角)B --&gt; C&#123;ifa&#125;C --&gt; |a&#x3D;1| D[result1]C --&gt; |a&#x3D;2| E[result2] UML时序图123​&#96;&#96;&#96;mermaidsequenceDiagram + 回车 超链接123github](https:&#x2F;&#x2F;github.com&#x2F;)&lt;https:&#x2F;&#x2F;github.com&#x2F;&gt;![图片](url,title) 分割线1使用 *** 和 --- 内联样式字体123456**字体加粗** command+b__字体加粗__*字体倾斜* command+i_字体倾斜_&lt;u&gt;下划线&lt;&#x2F;u&gt; command+u~~删除线~~ 注脚12github[^1][^1]:https:&#x2F;&#x2F;github.com 特殊符号12345678910111213&amp;copy; 版权&amp;times; 乘号&amp;divide; 除号&amp;plusmn; 加减号&lt; 小于号&gt; 大于号&amp;ne; 不等号&amp;le; 小于等于&amp;ge; 大于等于&amp;nbsp; 空格&amp; 与&quot; 双引号&amp;apos; 单引号","categories":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://yoursite.com/categories/MarkDown/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"http://yoursite.com/tags/Typora/"},{"name":"MarkDown","slug":"MarkDown","permalink":"http://yoursite.com/tags/MarkDown/"}]},{"title":"Plantuml.md","slug":"Plantuml","date":"2020-04-13T15:14:00.000Z","updated":"2020-04-13T15:32:04.675Z","comments":true,"path":"2020/04/13/Plantuml/","link":"","permalink":"http://yoursite.com/2020/04/13/Plantuml/","excerpt":"","text":"UMLUML（Unified Modeling Language）是一种统一建模语言，为面向对象开发系统的产品进行说明、可视化、和编制文档的一种标准语言。 UML图分为用例视图、设计视图、进程视图、实现视图和拓扑视图，又可以静动分为静态视图和动态视图。静态图分为：用例图，类图，对象图，包图，构件图，部署图。动态图分为：状态图，活动图，协作图，序列图。 详细介绍，本文主要介绍类图。 类图用户根据用例图抽象成类，描述类的内部结构和类与类之间的关系，是一种静态结构图。 在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)。 各种关系的强弱顺序： 泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖 泛化【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何继承父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。 实现【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现。 关联【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。 【代码体现】：成员变量 聚合【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。 聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。 【代码体现】：成员变量 组合【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。 组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。 【代码体现】：成员变量 【箭头及指向】：带实心菱形的实线，菱形指向整体 依赖【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖. 【代码表现】：局部变量、方法的参数或者对静态方法的调用 【箭头及指向】：带箭头的虚线，指向被使用者 五种类间关系的图形表示介绍 关联 依赖 聚合 组合 泛化 extends 实现 implements 带实线的箭头 带虚线的箭头 菱形箭头 菱形实心箭头 带实线的三角形箭头 带虚线的三角形箭头 泛化，Generalization：&lt;|-- 关联，Association：&lt;-- 组合，Composition：*-- 聚合，Aggregation：o-- 实现，Realization：&lt;|.. 依赖，Dependency：&lt;.. 以上是常见的六种关系，--可以替换成..就可以得到虚线。另外，其中的符号是可以改变方向的，例如：&lt;|--表示右边的类泛化左边的类；--|&gt;表示左边的类泛化右边的类 @startumlTitle “类之前的关系”ClassA &lt;– ClassB:关联ClassA &lt;.. ClassB : 依赖ClassA o– ClassB:聚集ClassA &lt;|– ClassB:泛化ClassA &lt;|.. ClassB:实现@enduml IDEA安装plantuml插件 点击“Plugins”选项，并搜索“PlantUML”并安装“PlantUML integration”。 下载并安装“graphviz”。brew install graphviz 右键单击选择“New”-&gt;“PlantUML File” 官网文档在线预览 例如：先在 http://www.plantuml.com/plantuml/uml 上画出需要的UML图，然后将地址通过UML的写法导入。由于本人将plantuml的纪录放在``标签内保存，方便以后的修改。 @startuml Title \"单例模式(通用类图)\" class Client class Singleton Singleton &lt;.. Client class Singleton{ static final Singleton = new Singleton() static Singleton getSingleton() private Singleton()} class Client {– 通过 Singleton.getSingleton()方式访问}@enduml 语法参考 定义一个类 @startuml Title \"普通定义\" Class China { String area int rivers long person class Beijing{} interface aa{} String getArea() long getPerson() } @enduml 多样定义 @startumlTitle “多样定义”Class China {String area /‘-表示权限private’/ #int rivers /‘#表示权限protected’/+long person /‘+表示权限public’/class Beijing{}interface aa{}String getArea() /‘表示权限package private’/long getPerson()}@enduml 静态属性+抽象方法 Class China {{static}+int id /‘ 表示 静态属性（下划线） ‘/-String area#int rivers+long person&gt;~String getArea(){abstract}long getPerson() /‘ 表示 抽象方法（斜体） ‘/}@enduml","categories":[{"name":"UML","slug":"UML","permalink":"http://yoursite.com/categories/UML/"}],"tags":[{"name":"UML","slug":"UML","permalink":"http://yoursite.com/tags/UML/"},{"name":"IDEA","slug":"IDEA","permalink":"http://yoursite.com/tags/IDEA/"},{"name":"PlantUml","slug":"PlantUml","permalink":"http://yoursite.com/tags/PlantUml/"}]}],"categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"},{"name":"MarkDown","slug":"MarkDown","permalink":"http://yoursite.com/categories/MarkDown/"},{"name":"UML","slug":"UML","permalink":"http://yoursite.com/categories/UML/"}],"tags":[{"name":"finder","slug":"finder","permalink":"http://yoursite.com/tags/finder/"},{"name":"cdto","slug":"cdto","permalink":"http://yoursite.com/tags/cdto/"},{"name":"Typora","slug":"Typora","permalink":"http://yoursite.com/tags/Typora/"},{"name":"MarkDown","slug":"MarkDown","permalink":"http://yoursite.com/tags/MarkDown/"},{"name":"UML","slug":"UML","permalink":"http://yoursite.com/tags/UML/"},{"name":"IDEA","slug":"IDEA","permalink":"http://yoursite.com/tags/IDEA/"},{"name":"PlantUml","slug":"PlantUml","permalink":"http://yoursite.com/tags/PlantUml/"}]}